시간복잡도 (빅오 표기법)
  O(1), O(logN), O(N), O(NlogN), O(N^2), O(N^3), O(2^N)
c언어  1초당 1억만번의  연산
파이썬 1초당 2000만번의 연산

-----------총 시간 측정 소스코드-----------
import time
start_time = time.time() #측정시작

end_time = time.time() #측정종료
print("time: ", end_time - start_time)
------------------------------------------

<수 자료형>

  1. 정수형

  2. 실수형
    소수부가 0일때 0생략  (5.) -> (5.0),  (.5) -> (0.5)
    실수로 계산시에는 컴퓨터 시스템(2진법)상 정확도에 한계가 있음
    ex) 0.3 + 0.6 = 0.899999...
    따라서 round()함수를 사용한다. ex) round(123.4567, 3) = 123.457

  3. 지수
    지수 표현법 => 유효숫자e지수 = 유효숫자 x 10 ^ 지수 (1e6) -> (1000000.0)
    (실수반환됨)

  4. 연산
    나누기 연산자(/)는 결과를 실수로 반환
    나머지 연산자(%) (홀짝 확인할때 많이 사용함)
    몫 연산자(//), 거듭제곱 연산자(**)


<리스트 자료형>

  리스트 선언 list(), []  리스트의 인덱스는 0부터
    ex) a = [1, 2, 3, 4, 5],  print(a[3]) => 4
    a[-1] 처럼 음의 원소를 넣으면 뒤에서부터 참조 => 5 출력

  리스트의 슬라이싱
    리스트에서 연속적인 위치를 갖는 원소들을 가져올때 사용
    대괄호에 콜론(:)을 널어 설정한다. (끝 인덱스는 실제보다 1을 더 크게 설정)
    ex) a = [1,2,3,4,5,6,7,8] print(a[1 : 4]) => [2,3,4]

  리스트 컴프리헨션

    array = [i for i in range(10)] => [0,1,2,3,4,5,6,7,8,9]
    (반복문 for 사용)
    array = [i for i in range(10) if i % 2 == 1] => [1,3,5,7,9]
    array = [i * i for i in range(5)] => [0,1,4,9,16]
    (조건문 if 응용, 연산자 응용)
    
    리스트 컴프리헨션은 2차원 리스트를 초기화할때 효과적임
    ex) array = [[0] * m for _ in range(n)]
    array = [[0] * m] * n 처럼 작성하면 리스트값이 겹칠 수 있음

    언더바(_)는 파이썬에서 반복을 수행하되 변수값을 무시할때 사용
    ex) for _ in range(5)

  리스트 관련 기타 메서드

    append()    변수.append()                 O(1)
    sort()      변수.sort()                   O(NlogN)
                변수.sort(reverse = True)     O(N)
    reverse()   변수.reverse()                O(N)
    insert()    insert(인덱스, 삽입할 값)      O(N)
    count()     변수.count(특정 값)            O(N)
    remove()    변수.remove(특정 값)           O(N)

    ex) a = [1,2,3,4,5,5,5] #리스트에서 특정 값을 가지는 원소를 모두 제거하기
        remove_set = {3, 5} (집합 자료형)
        result = [i for i in a if i not in remove_set]  => [1,2,4]


<문자열 자료형>

  문자열 변수를 초기화할 때는 큰따옴표(")나 작은 따옴표(')를 이용함

  문자열 변수에 덧셈(+)을 이용하면 문자열이 더해져서 연결됨
              양의 정수를 곱하면 문자열이 그 값만큼 여러 변 더해짐
  문자열도 인덱싱과 슬라이싱 사용 가능
    ex) a = "ABCDE" print(a[2:4]) => CD

<튜플 자료형>

  튜플은 리스트와 유사하지만 한 번 선언되면 값을 바꿀 수 없고, 소괄호(())를 이용함
  튜플은 리스트에 비해 메모리적으로 공간 효율적임

  1. 서로 다른 성질의 데이터를 묶어서 관리해야 할 때
  2. 데이터의 나열(묶음)을 해싱(hashing)의 키 값으로 사용해야 할 때
  3. 리스트보다 메모리를 효율저으로 사용해야 할 때


<사전 자료형>

  사전 자료형은 키(key)와 값(value)의 쌍을 데이터로 가지는 자료형임
  사전 자료형은 '변경 불가능한 자료형'을 키로 사용할 수 있음
  파이썬의 사전 자료형은 해시 테이블을 이용하므로 데이터의 조회 및 수정에 있어서 O(1)의
  시간에 처리할 수 있음

  사전 자료형은 dict()를 통해 초기화 가능
    ex) data = dict() data['사과'] = 'apple'  => {'사과': 'apple'}
  사전 자료형에서는 키와 값을 별도로 뽑아낼 수 있음
    ex) key_list = data.key()
        value_list = data.values()    =>  dict_values(['apple], 'banana'])
        함수는 사전 자료형으로 값을 반환하므로 list로 초기화 시켜주어야 함

<집합 자료형>

  중복을 허용하지 않고, 순서가 없음
  집합은 리스트 또는 문자열을 이용해서 초기화 할 수 있음
    ex) data = set([1,1,2,2,3,3,4,4]) => {1,2,3,4}
  또는 중괄호({})안에 각 원소를 콤마(,)를 기준으로 구분하여 삽입함으로써 초기화 할 수 있음
    ex) data = {1,1,2,3,4,4} => {1,2,3,4}
  데이터의 조회 및 수정에 있어서 O(1)의 시간에 처리할 수 있음

  -집합 자료형의 연산
    1. 합집합(|)
    2. 교집합(&)
    3. 차집합(-)
  -집합 자료형 관련 함수
    1.  새로운 원소 추가           ex) data.add(4)
    2.  새로운 원소 여러개 추가     ex) data.updata([5,6])
    3.  특정한 값을 갖는 원소 삭제  ex) data.remove(3)


<기본 입출력>

  1. input() 함수는 한 줄의 문자열을 입력 받는 함수
  2. map()   함수는 리스트의 모든 원소에 각각 특정한 함수를 적용할 떄 사용

  사용자로부터 입력을 최대한 빠르게 받아야 하는 경우
    sys라이브러리에 정의도어 있는 sys.stdin.readline() 메서드를 이용함
    단, 입력 후 엔터가 줄 바꿈 기호로 입력되므로 rstrip() 메서드를 함께 사용함
    ex) data = sys.stdin.readline().rstrip()

  파이썬에서 기본출력은 print()함수를 이용함
    print()는 출력이후에 기본적으로 줄 바꿈을 하는데
    원치 않을경우 end() 속성을 사용하면 됨
    ex) print("Hi", end=" ")

  f-string
    파이썬 3.6부터 문자열 앞에 접두사 'f'를 붙여 널어 사용
    중괄호 안에 변수명을 기입하여 문자열과 정수를 넣을 수 있음
    ex) print(f"오늘의 날씨는 {weather}입니다.")


<조건문>

  조건문의 기본적인 형태 : if ~ elif ~ else

  비교 연산자
    ex) ==, !=, >, <, >=, <=

  논리 연산자
    ex) and, or, not A

  기타 연산자
    ex) X in 리스트       리스트 안에 x가 들어가 있을 때 참(True)이다.
        X not in 문자열   문자열 안에 x가 들어가 있지 않을 때 참이다.

  pass 키워드
    아무것도 처리하고 싶지 않을 떄 사용함 (디버깅 과정에서 조건문 형태만 만들고 싶을 때)

  조건문의 간소화
    소스코드가 한 줄인 경우   ex) if score >= 80: result = "Success"

    조건부 표현식은 if ~ else문을 한 줄에 작성할 수 있게함
      ex) result = "Success" if score >= 80 else "Fail"

  파이썬 조건문 내에서의 부등식
    파이썬은 다른 언어와 다르게 조건문 안에서 수학의 부등식을 그대로 사용할 수 있음
      ex 파이썬)  if 30 < A < 60:


<반복문>

  -------------------------
    while 조건문:

    for 변수 in 리스트:
  -------------------------

  for문에서 연속적인 값을 차례대로 순회할 때는 range() 를 주로 사용함
    이때 range(시작 값, 끝 값 + 1)형태로 사용됨

  파이썬의 continue 키워드
    반복문에서 남은 코드의 실행을 건너뛰고, 다음 반복을 진행하고자 할 때 사용

  파이썬의 break 키워드
    반복문을 즉시 탈출하고자 할 때


<함수와 람다 표현식>

  함수란 특정한 작업을 하나의 단위로 묶어놓은 것을 의미

  ---------------------
  def 함수명(매개변수):
    실행할 소스코드
    return 반환 값
  ---------------------

  파라미터의 변수를 직접 지정
    이 경우 매개변수의 순서가 달라도 상관없음
    ex)   add(b = 3, a = 7)

  global 키워드
    global 키워드로 변수를 지정하면 해당 함수 바깥에서 선언된 변수를 바로 참조함

  여러 개의 반환 값
    ex)   return A, B, C, D     =>    a, b, c, d = test(7, 3)

  람다 표현식
    람다 표현식을 이용하면 함수를 간단하게 작성할 수 있음

    일반적인 사용
      def add(a, b):
        return a + b

      print(add(3, 7))
    
    람다 표현식으로 구현한 add() 메서드
      print((lambda a, b: a + b)(3, 7))


<실전에서 유용한 표준 라이브러리>

  내장함수:      기본 입출력 함수부터 정렬 함수까지 기본적인 함수들
    sum()
    min()
    max()
    eval(" ") 사람의 입장에서의 계산식을 계산해줌
    sorted(), sorted(A, reverse=Ture), sort(A, key=B, reverse=True)

  itertools:    파이썬에서 반복되는 형태의 데이터를 처리하기 위한 기능을 제공(순열, 조합)
    순열 : permutations()
    조합 : combinations()
    중복 순열 : product()
    중복 조합 : cimbinations_with_replacement()

  heapq:        힙(heap) 자료구조를 제공
  bisect:       이진 탐색(Binary search) 기능을 제공
  collections:  덱(deque), 카운터(Counter) 등의 유용한 자료구조를 포함
    Counter : 리스트와 같은 반복 가능한 객체가 주어졌을 때 내부의 원소가 몇 번씩 등장했는지 알려줌

  math:         필수적인 수학적 기능을 제공
    최대 공약수 : gcd()
    최소 공배수 : lcm()